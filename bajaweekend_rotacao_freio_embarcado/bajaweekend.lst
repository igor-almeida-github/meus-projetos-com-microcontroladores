;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 16/11/2019 18:59:40
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2880      	GOTO       128
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00AA      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00AB      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A0      	MOVWF      32
;bajaweekend.c,5 :: 		void interrupt(void){
;bajaweekend.c,6 :: 		if(INTCON.INTF){
0x000D	0x1C8B      	BTFSS      INTCON, 1
0x000E	0x2827      	GOTO       L_interrupt0
;bajaweekend.c,7 :: 		motor++;                                                               // Conta o número de voltas do motor
0x000F	0x0823      	MOVF       _motor, 0
0x0010	0x00F0      	MOVWF      R0
0x0011	0x0824      	MOVF       _motor+1, 0
0x0012	0x00F1      	MOVWF      R0+1
0x0013	0x0825      	MOVF       _motor+2, 0
0x0014	0x00F2      	MOVWF      R0+2
0x0015	0x0826      	MOVF       _motor+3, 0
0x0016	0x00F3      	MOVWF      R0+3
0x0017	0x0AF0      	INCF       R0, 1
0x0018	0x1903      	BTFSC      STATUS, 2
0x0019	0x0AF1      	INCF       R0+1, 1
0x001A	0x1903      	BTFSC      STATUS, 2
0x001B	0x0AF2      	INCF       R0+2, 1
0x001C	0x1903      	BTFSC      STATUS, 2
0x001D	0x0AF3      	INCF       R0+3, 1
0x001E	0x0870      	MOVF       R0, 0
0x001F	0x00A3      	MOVWF      _motor
0x0020	0x0871      	MOVF       R0+1, 0
0x0021	0x00A4      	MOVWF      _motor+1
0x0022	0x0872      	MOVF       R0+2, 0
0x0023	0x00A5      	MOVWF      _motor+2
0x0024	0x0873      	MOVF       R0+3, 0
0x0025	0x00A6      	MOVWF      _motor+3
;bajaweekend.c,8 :: 		INTCON.INTF = 0;
0x0026	0x108B      	BCF        INTCON, 1
;bajaweekend.c,9 :: 		}
L_interrupt0:
;bajaweekend.c,10 :: 		if(PIR1.TMR1IF){                                                           // Lê o estado do tanque 1 vez a cada 65.536 ms
0x0027	0x1C0C      	BTFSS      PIR1, 0
0x0028	0x284A      	GOTO       L_interrupt1
;bajaweekend.c,11 :: 		if (PORTB.RB3) full++;
0x0029	0x1D86      	BTFSS      PORTB, 3
0x002A	0x282D      	GOTO       L_interrupt2
0x002B	0x0AA9      	INCF       _full, 1
0x002C	0x282E      	GOTO       L_interrupt3
L_interrupt2:
;bajaweekend.c,12 :: 		else empty++;
0x002D	0x0AA2      	INCF       _empty, 1
L_interrupt3:
;bajaweekend.c,13 :: 		if ( empty + full > 77){                                               // Após 77 amostras (aproximadamente 5 segundos)
0x002E	0x0829      	MOVF       _full, 0
0x002F	0x0722      	ADDWF      _empty, 0
0x0030	0x00F1      	MOVWF      R1
0x0031	0x01F2      	CLRF       R1+1
0x0032	0x1803      	BTFSC      STATUS, 0
0x0033	0x0AF2      	INCF       R1+1, 1
0x0034	0x3080      	MOVLW      128
0x0035	0x00F0      	MOVWF      R0
0x0036	0x3080      	MOVLW      128
0x0037	0x0672      	XORWF      R1+1, 0
0x0038	0x0270      	SUBWF      R0, 0
0x0039	0x1D03      	BTFSS      STATUS, 2
0x003A	0x283D      	GOTO       L__interrupt22
0x003B	0x0871      	MOVF       R1, 0
0x003C	0x3C4D      	SUBLW      77
L__interrupt22:
0x003D	0x1803      	BTFSC      STATUS, 0
0x003E	0x2849      	GOTO       L_interrupt4
;bajaweekend.c,14 :: 		if (empty > full) tank = 0;                                        // Se a maior parte das amstras indicar que está vazio, então o tanque está vazio
0x003F	0x0822      	MOVF       _empty, 0
0x0040	0x0229      	SUBWF      _full, 0
0x0041	0x1803      	BTFSC      STATUS, 0
0x0042	0x2845      	GOTO       L_interrupt5
0x0043	0x01A1      	CLRF       _tank
0x0044	0x2847      	GOTO       L_interrupt6
L_interrupt5:
;bajaweekend.c,15 :: 		else tank = 1;                                                     // Caso contrário, está cheio
0x0045	0x3001      	MOVLW      1
0x0046	0x00A1      	MOVWF      _tank
L_interrupt6:
;bajaweekend.c,16 :: 		empty = 0;
0x0047	0x01A2      	CLRF       _empty
;bajaweekend.c,17 :: 		full = 0;
0x0048	0x01A9      	CLRF       _full
;bajaweekend.c,18 :: 		}
L_interrupt4:
;bajaweekend.c,19 :: 		PIR1.TMR1IF = 0;
0x0049	0x100C      	BCF        PIR1, 0
;bajaweekend.c,20 :: 		}
L_interrupt1:
;bajaweekend.c,21 :: 		}
L_end_interrupt:
L__interrupt21:
0x004A	0x0820      	MOVF       32, 0
0x004B	0x00F0      	MOVWF      R0
0x004C	0x082B      	MOVF       ___savePCLATH, 0
0x004D	0x008A      	MOVWF      PCLATH
0x004E	0x0E2A      	SWAPF      ___saveSTATUS, 0
0x004F	0x0083      	MOVWF      STATUS
0x0050	0x0EFF      	SWAPF      R15, 1
0x0051	0x0E7F      	SWAPF      R15, 0
0x0052	0x0009      	RETFIE
; end of _interrupt
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x0053	0x1283      	BCF        STATUS, 5
0x0054	0x1303      	BCF        STATUS, 6
0x0055	0x0828      	MOVF       ___DoICPAddr+1, 0
0x0056	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0057	0x0827      	MOVF       ___DoICPAddr, 0
0x0058	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0059	0x0008      	RETURN
; end of _____DoICP
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x005A	0x2053      	CALL       _____DoICP
0x005B	0x118A      	BCF        PCLATH, 3
0x005C	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x005D	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x005E	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x005F	0x0AA7      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x0060	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x0061	0x0AA8      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x0062	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x0063	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x0064	0x285A      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x0065	0x0008      	RETURN
; end of ___CC2DW
_UART1_Write:
;__Lib_UART_b21.c,37 :: 		
;__Lib_UART_b21.c,38 :: 		
L_UART1_Write3:
0x0066	0x1683      	BSF        STATUS, 5
0x0067	0x1303      	BCF        STATUS, 6
0x0068	0x1898      	BTFSC      TXSTA, 1
0x0069	0x286C      	GOTO       L_UART1_Write4
;__Lib_UART_b21.c,39 :: 		
0x006A	0x0000      	NOP
0x006B	0x2866      	GOTO       L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_b21.c,40 :: 		
0x006C	0x1283      	BCF        STATUS, 5
0x006D	0x0833      	MOVF       FARG_UART1_Write_data_, 0
0x006E	0x0099      	MOVWF      TXREG
;__Lib_UART_b21.c,41 :: 		
L_end_UART1_Write:
0x006F	0x0008      	RETURN
; end of _UART1_Write
_UART1_Init:
;__Lib_UART_b21.c,2 :: 		
;__Lib_UART_b21.c,5 :: 		
0x0070	0x1683      	BSF        STATUS, 5
0x0071	0x1303      	BCF        STATUS, 6
0x0072	0x1698      	BSF        TXSTA, 5
;__Lib_UART_b21.c,6 :: 		
0x0073	0x3090      	MOVLW      144
0x0074	0x1283      	BCF        STATUS, 5
0x0075	0x0098      	MOVWF      RCSTA
;__Lib_UART_b21.c,7 :: 		
0x0076	0x1683      	BSF        STATUS, 5
0x0077	0x1486      	BSF        TRISB1_bit, BitPos(TRISB1_bit+0)
;__Lib_UART_b21.c,8 :: 		
0x0078	0x1106      	BCF        TRISB2_bit, BitPos(TRISB2_bit+0)
;__Lib_UART_b21.c,9 :: 		
L_UART1_Init0:
0x0079	0x1283      	BCF        STATUS, 5
0x007A	0x1E8C      	BTFSS      PIR1, 5
0x007B	0x287F      	GOTO       L_UART1_Init1
;__Lib_UART_b21.c,10 :: 		
0x007C	0x081A      	MOVF       RCREG, 0
0x007D	0x00F0      	MOVWF      R0
0x007E	0x2879      	GOTO       L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_b21.c,11 :: 		
L_end_UART1_Init:
0x007F	0x0008      	RETURN
; end of _UART1_Init
_main:
0x0080	0x3001      	MOVLW      1
0x0081	0x1283      	BCF        STATUS, 5
0x0082	0x1303      	BCF        STATUS, 6
0x0083	0x00A1      	MOVWF      _tank
0x0084	0x01A2      	CLRF       _empty
0x0085	0x01A3      	CLRF       _motor
0x0086	0x01A4      	CLRF       36
0x0087	0x01A5      	CLRF       37
0x0088	0x01A6      	CLRF       38
;bajaweekend.c,23 :: 		void main() {
;bajaweekend.c,25 :: 		unsigned char anterior = 0;
0x0089	0x01B0      	CLRF       main_anterior_L0
0x008A	0x01B1      	CLRF       main_freio_L0
0x008B	0x01B2      	CLRF       main_freio_L0+1
;bajaweekend.c,27 :: 		PCON.OSCF = 1;                                                           // 4 MHZ interno
0x008C	0x1683      	BSF        STATUS, 5
0x008D	0x158E      	BSF        PCON, 3
;bajaweekend.c,28 :: 		OPTION_REG.INTEDG = 0;
0x008E	0x1301      	BCF        OPTION_REG, 6
;bajaweekend.c,29 :: 		INTCON = 0xD0;                                                           // Gie habilitado, Interrupções dos periféricos habilitadas, INT habilitado
0x008F	0x30D0      	MOVLW      208
0x0090	0x008B      	MOVWF      INTCON
;bajaweekend.c,30 :: 		PIE1 = 0x01;                                                             // Habilita interrupção pelo overflow do timer 1
0x0091	0x3001      	MOVLW      1
0x0092	0x008C      	MOVWF      PIE1
;bajaweekend.c,31 :: 		T1CON = 0x01;                                                            // Dispara o timer 1 com prescale de 1, overflow a cada 65.536 ms
0x0093	0x3001      	MOVLW      1
0x0094	0x1283      	BCF        STATUS, 5
0x0095	0x0090      	MOVWF      T1CON
;bajaweekend.c,32 :: 		UART1_Init(1200);
0x0096	0x30CF      	MOVLW      207
0x0097	0x1683      	BSF        STATUS, 5
0x0098	0x0099      	MOVWF      SPBRG
0x0099	0x1518      	BSF        TXSTA, 2
0x009A	0x2070      	CALL       _UART1_Init
;bajaweekend.c,33 :: 		for(;;){
L_main7:
;bajaweekend.c,34 :: 		if ((PORTB.RB5 == 1) && (anterior == 0)){                            // Borda de subida do freio detectada, switch debounce
0x009B	0x1E86      	BTFSS      PORTB, 5
0x009C	0x28B0      	GOTO       L_main12
0x009D	0x0830      	MOVF       main_anterior_L0, 0
0x009E	0x3A00      	XORLW      0
0x009F	0x1D03      	BTFSS      STATUS, 2
0x00A0	0x28B0      	GOTO       L_main12
L__main19:
;bajaweekend.c,35 :: 		freio++;
0x00A1	0x0AB1      	INCF       main_freio_L0, 1
0x00A2	0x1903      	BTFSC      STATUS, 2
0x00A3	0x0AB2      	INCF       main_freio_L0+1, 1
;bajaweekend.c,36 :: 		anterior = 1;
0x00A4	0x3001      	MOVLW      1
0x00A5	0x00B0      	MOVWF      main_anterior_L0
;bajaweekend.c,37 :: 		delay_ms(10);
0x00A6	0x300D      	MOVLW      13
0x00A7	0x00FC      	MOVWF      R12
0x00A8	0x30FB      	MOVLW      251
0x00A9	0x00FD      	MOVWF      R13
L_main13:
0x00AA	0x0BFD      	DECFSZ     R13, 1
0x00AB	0x28AA      	GOTO       L_main13
0x00AC	0x0BFC      	DECFSZ     R12, 1
0x00AD	0x28AA      	GOTO       L_main13
0x00AE	0x0000      	NOP
0x00AF	0x0000      	NOP
;bajaweekend.c,38 :: 		}
L_main12:
;bajaweekend.c,39 :: 		if ((PORTB.RB5 == 0) && (anterior == 1)){                            // Borda de descida do freio detectada, switch debounce
0x00B0	0x1A86      	BTFSC      PORTB, 5
0x00B1	0x28C1      	GOTO       L_main16
0x00B2	0x0830      	MOVF       main_anterior_L0, 0
0x00B3	0x3A01      	XORLW      1
0x00B4	0x1D03      	BTFSS      STATUS, 2
0x00B5	0x28C1      	GOTO       L_main16
L__main18:
;bajaweekend.c,40 :: 		anterior = 0;
0x00B6	0x01B0      	CLRF       main_anterior_L0
;bajaweekend.c,41 :: 		delay_ms(7);
0x00B7	0x300A      	MOVLW      10
0x00B8	0x00FC      	MOVWF      R12
0x00B9	0x3015      	MOVLW      21
0x00BA	0x00FD      	MOVWF      R13
L_main17:
0x00BB	0x0BFD      	DECFSZ     R13, 1
0x00BC	0x28BB      	GOTO       L_main17
0x00BD	0x0BFC      	DECFSZ     R12, 1
0x00BE	0x28BB      	GOTO       L_main17
0x00BF	0x0000      	NOP
0x00C0	0x0000      	NOP
;bajaweekend.c,42 :: 		}
L_main16:
;bajaweekend.c,43 :: 		INTCON.GIE = 0;
0x00C1	0x138B      	BCF        INTCON, 7
;bajaweekend.c,44 :: 		motor_2 = motor;                                                     // Variável buffer, para não ocorrer mudança na variável que conta o numero de giros durante a transmissão, uma vez que a variável motor pode ser alterada a qualquer momento
0x00C2	0x0823      	MOVF       _motor, 0
0x00C3	0x00AC      	MOVWF      main_motor_2_L0
0x00C4	0x0824      	MOVF       _motor+1, 0
0x00C5	0x00AD      	MOVWF      main_motor_2_L0+1
0x00C6	0x0825      	MOVF       _motor+2, 0
0x00C7	0x00AE      	MOVWF      main_motor_2_L0+2
0x00C8	0x0826      	MOVF       _motor+3, 0
0x00C9	0x00AF      	MOVWF      main_motor_2_L0+3
;bajaweekend.c,45 :: 		INTCON.GIE = 1;
0x00CA	0x178B      	BSF        INTCON, 7
;bajaweekend.c,48 :: 		UART1_Write(*((unsigned char*)&motor_2+3));
0x00CB	0x082F      	MOVF       main_motor_2_L0+3, 0
0x00CC	0x00B3      	MOVWF      FARG_UART1_Write_data_
0x00CD	0x2066      	CALL       _UART1_Write
;bajaweekend.c,49 :: 		UART1_Write(*((unsigned char*)&motor_2+2));
0x00CE	0x082E      	MOVF       main_motor_2_L0+2, 0
0x00CF	0x00B3      	MOVWF      FARG_UART1_Write_data_
0x00D0	0x2066      	CALL       _UART1_Write
;bajaweekend.c,50 :: 		UART1_Write(*((unsigned char*)&motor_2+1));
0x00D1	0x082D      	MOVF       main_motor_2_L0+1, 0
0x00D2	0x00B3      	MOVWF      FARG_UART1_Write_data_
0x00D3	0x2066      	CALL       _UART1_Write
;bajaweekend.c,51 :: 		UART1_Write(*((unsigned char*)&motor_2));
0x00D4	0x082C      	MOVF       main_motor_2_L0, 0
0x00D5	0x00B3      	MOVWF      FARG_UART1_Write_data_
0x00D6	0x2066      	CALL       _UART1_Write
;bajaweekend.c,53 :: 		UART1_Write(*((unsigned char*)&freio+1));
0x00D7	0x0832      	MOVF       main_freio_L0+1, 0
0x00D8	0x00B3      	MOVWF      FARG_UART1_Write_data_
0x00D9	0x2066      	CALL       _UART1_Write
;bajaweekend.c,54 :: 		UART1_Write(*((unsigned char*)&freio));
0x00DA	0x0831      	MOVF       main_freio_L0, 0
0x00DB	0x00B3      	MOVWF      FARG_UART1_Write_data_
0x00DC	0x2066      	CALL       _UART1_Write
;bajaweekend.c,56 :: 		UART1_Write(tank);
0x00DD	0x0821      	MOVF       _tank, 0
0x00DE	0x00B3      	MOVWF      FARG_UART1_Write_data_
0x00DF	0x2066      	CALL       _UART1_Write
;bajaweekend.c,58 :: 		UART1_Write(0x0D);
0x00E0	0x300D      	MOVLW      13
0x00E1	0x00B3      	MOVWF      FARG_UART1_Write_data_
0x00E2	0x2066      	CALL       _UART1_Write
;bajaweekend.c,59 :: 		UART1_Write(0x0A);
0x00E3	0x300A      	MOVLW      10
0x00E4	0x00B3      	MOVWF      FARG_UART1_Write_data_
0x00E5	0x2066      	CALL       _UART1_Write
;bajaweekend.c,61 :: 		}
0x00E6	0x289B      	GOTO       L_main7
;bajaweekend.c,63 :: 		}
L_end_main:
0x00E7	0x28E7      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [79]    _interrupt
0x0053       [7]    _____DoICP
0x005A      [12]    ___CC2DW
0x0066      [10]    _UART1_Write
0x0070      [16]    _UART1_Init
0x0080     [104]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [1]    PORTB
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PIR1
0x0010       [1]    T1CON
0x0018       [1]    RCSTA
0x0019       [1]    TXREG
0x001A       [1]    RCREG
0x0021       [1]    _tank
0x0022       [1]    _empty
0x0023       [4]    _motor
0x0027       [2]    ___DoICPAddr
0x0029       [1]    _full
0x002A       [1]    ___saveSTATUS
0x002B       [1]    ___savePCLATH
0x002C       [4]    main_motor_2_L0
0x0030       [1]    main_anterior_L0
0x0031       [2]    main_freio_L0
0x0033       [1]    FARG_UART1_Write_data_
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0086       [0]    TRISB2_bit
0x0086       [0]    TRISB1_bit
0x008C       [1]    PIE1
0x008E       [1]    PCON
0x0098       [1]    TXSTA
0x0099       [1]    SPBRG
